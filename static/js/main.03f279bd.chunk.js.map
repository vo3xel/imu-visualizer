{"version":3,"sources":["phone.glb","App.js","reportWebVitals.js","index.js"],"names":["Play","onPlayerClick","type","className","onClick","Pause","App","useState","playing","setPlaying","index","setIndex","lastIndex","setLastIndex","accXValues","setAccXValues","accYValues","setAccYValues","accZValues","setAccZValues","gyroXValues","setGyroXValues","gyroYValues","setGyroYValues","gyroZValues","setGyroZValues","latValues","setLatValues","longValues","setLongValues","useEffect","interval","setInterval","console","log","clearInterval","handlePlayerClick","iconMarkup","renderToStaticMarkup","customMarkerIcon","divIcon","html","Container","fluid","Row","Col","onFileLoaded","data","fileInfo","GPSElementCounter","forEach","element","measurementValue","Number","parseFloat","concat","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","icon","Popup","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03f279bd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/phone.880fcdad.glb\";","import CSVReader from 'react-csv-reader'\nimport { Canvas, useLoader, extend, useFrame, useThree } from 'react-three-fiber'\nimport phone from './phone.glb'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport React, { Suspense, useRef, useState,useEffect } from 'react'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { MapContainer, TileLayer, Popup, Marker } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { divIcon } from 'leaflet';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport './App.css';\n\nfunction Phone() {\n  const gltf = useLoader(GLTFLoader, phone)\n  return <primitive object={gltf.scene} position={[0, 0, 0]} />\n}\n\nfunction Box() {\n  return (\n    <mesh>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial attach=\"material\" transparent opacity={0.5} />\n    </mesh>\n  )\n}\n\nfunction UpdateCam() {\n  // This one makes the camera move in and out\n  useFrame(({ clock, camera }) => {\n    //camera.rotation.z = 5 + Math.sin(clock.getElapsedTime()) * 5\n  })\n  return null\n}\n\nconst Play = ({onPlayerClick}) => {\n  return (\n    <button type=\"button\" className=\"btn btn-primary\" onClick={onPlayerClick}>Play</button>\n  )\n}\n\nconst Pause = ({onPlayerClick}) => {\n  return (\n    <button type=\"button\" className=\"btn btn-primary\" onClick={onPlayerClick}>Pause</button>\n  )\n}\n\nfunction App() {\n  const [playing, setPlaying] = useState(false);\n  const [lat, setLat] = useState(51.505)\n  const [long, setLong] = useState(-0.09)\n  const [index, setIndex] = useState(0)\n  const [lastIndex, setLastIndex] = useState(0)\n  const [accXValues,setAccXValues] = useState([])\n  const [accYValues,setAccYValues] = useState([])\n  const [accZValues,setAccZValues] = useState([])\n  const [gyroXValues,setGyroXValues] = useState([])\n  const [gyroYValues,setGyroYValues] = useState([])\n  const [gyroZValues,setGyroZValues] = useState([])\n  const [latValues,setLatValues] = useState([])\n  const [longValues,setLongValues] = useState([])\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if(playing && index < lastIndex){ \n        setIndex(index + 1)\n        console.log(\"index: \" + index)\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [index,playing,lastIndex]);\n  const handlePlayerClick = () => {\n    if (!playing) {\n      setPlaying(true)\n      \n    } else {\n      setPlaying(false)\n    }\n  }\n\n  const handleRestartClick = () => {\n    setIndex(0)\n  }\n  const iconMarkup = renderToStaticMarkup(<i className=\" fa fa-car fa-3x\" />);\n    const customMarkerIcon = divIcon({\n      html: iconMarkup,\n    });\n  return (\n    <div className=\"App\">\n      <Container fluid>\n      <Row>\n        <Col>IMU data visualizer</Col>\n      </Row>\n      <Row>\n        <Col><CSVReader onFileLoaded={(data, fileInfo) => {\n            let GPSElementCounter = 0\n            data.forEach(element => {\n              let measurementValue = Number.parseFloat(element[2])\n              switch(element[1]){\n                case \"1\":\n                  // gyro_x\n                  setGyroXValues(gyroXValues => gyroXValues.concat(measurementValue))\n                  break\n                case \"2\":\n                  // gyro_y\n                  setGyroYValues(gyroYValues => gyroYValues.concat(measurementValue))\n                  break\n                case \"3\":\n                  // gyro_z\n                  setGyroZValues(gyroZValues => gyroZValues.concat(measurementValue))\n                  break\n                case \"4\":\n                  // acc_x\n                  setAccXValues(accXValues => accXValues.concat(measurementValue))\n                  break\n                case \"5\":\n                  // acc_y\n                  setAccYValues(accYValues => accYValues.concat(measurementValue))\n                  break\n                case \"6\":\n                  // acc_z\n                  setAccZValues(accZValues => accZValues.concat(measurementValue))\n                  break\n                case \"7\":\n                  // lat\n                  setLatValues(latValues => latValues.concat(measurementValue))\n                  break\n                case \"8\":\n                  // long\n                  GPSElementCounter++\n                  setLongValues(longValues => longValues.concat(measurementValue))\n                  break   \n                default:\n                  break\n              }\n            });\n            setLastIndex(GPSElementCounter)\n          }}\n          /></Col>\n      </Row>\n      <Row>\n\n        <Col>\n        { latValues[index] && longValues[index] &&\n        <MapContainer style={{height: 600, width: 600}} center={[latValues[index],longValues[index]]} zoom={13} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n            <Marker position={[latValues[index],longValues[index]]} icon={customMarkerIcon}>\n              <Popup>\n                car position\n              </Popup>\n            </Marker>\n        </MapContainer>\n        }  \n        </Col>\n        <Col>\n        <h1>Data</h1>\n        <h2>IMU</h2>\n        <h3>Gyro</h3>\n        <p>X: {gyroXValues[index]}<br />Y: {gyroYValues[index]}<br />Z: {gyroZValues[index]}</p>\n        <h3>Acceleration</h3>\n        <p>X: {accXValues[index*20]}<br />Y: {accYValues[index*20]}<br />Z: {accZValues[index*20]}</p>\n        <h2>GPS</h2>\n        <p>Lat: {latValues[index]}<br />Long: {longValues[index]}</p>\n        </Col>\n\n      </Row>\n      <Row>\n        \n        <Col>\n          <br />\n          <button type=\"button\" className=\"btn btn-primary\" onClick={handleRestartClick}>From start</button>\n        </Col>\n        <Col>\n          <br />\n          {playing? <Pause onPlayerClick={handlePlayerClick} /> : <Play onPlayerClick={handlePlayerClick} />}\n        </Col>\n      </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}